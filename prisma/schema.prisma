generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique
  username  String    @unique
  email     String    @unique
  name      String?
  imageUrl  String?
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  builds    Build[]
  comments  Comment[]
  likes     Like[]
  profile   UserProfile?

  @@schema("public")
}

model UserProfile {
  id             String    @id @default(cuid())
  bio            String?   @db.Text
  bannerUrl      String?
  favoriteClass  String?
  favoriteWeapon String?
  createdAt      DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  // Relations
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@schema("public")
}

model Build {
  id           String    @id @default(cuid())
  title        String
  description  String
  level        Int
  buildType    String?
  vigor        Int
  mind         Int
  endurance    Int
  strength     Int
  dexterity    Int
  intelligence Int
  faith        Int
  arcane       Int
  weapons      String[]
  armor        String[]
  talismans    String[]
  spells       String[]
  createdAt    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  isPublished  Boolean?  @default(true)
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comments     Comment[]
  likes        Like[]

  @@index([userId])
  @@index([buildType])
  @@schema("public")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  userId    String
  buildId   String
  build     Build     @relation(fields: [buildId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@index([buildId])
  @@schema("public")
}

model Like {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  userId    String
  buildId   String
  build     Build     @relation(fields: [buildId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, buildId])
  @@index([userId])
  @@index([buildId])
  @@schema("public")
}
